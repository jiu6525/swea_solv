import math

def solve(n):
    ans = True
    l = list(str(n))
    for i in range(len(l)//2):
        if l[i] != l[-1-i]:
            ans = False
            break
    return ans


n = int(input())
for i0 in range(1,n+1):
    a,b = map(int,input().split())
    result = 0
    for i in range(a,b+1):
        l = math.ceil(math.sqrt(i))
        if i == l**2:
            if solve(i) and solve(l):
                result += 1
    print(f'#{i0} {result}')


swea 10570.제곱 팰린드롬 수
제곱근의 수가 실수형일때를 고려하는것이 생각하기 어려워서 math 라이브러리에서 제곱근을 올림한 후 제곱한 결과가 같은지 확인하였다
(만약 소수점 이하 값이 있다면 올림하기때문에 결과값이 다름)
math함수 없이 제곱근의 값에 인트를 취했을때 값이 같으면 된다는것을 알고 코드를 수정하였다.
/math 미사용

def solve(n):
    ans = True
    l = list(str(n))
    for i in range(len(l)//2):
        if l[i] != l[-1-i]:
            ans = False
            break
    return ans


n = int(input())
for i0 in range(1,n+1):
    a,b = map(int,input().split())
    result = 0
    for i in range(a,b+1):
        l = i**(1/2)
        if l == int(l):
            if solve(i) and solve(int(l)):
                result += 1
    print(f'#{i0} {result}')


/풀이과정 참조 코드수정
풀이과정을 확인하니 함수사용없이 원래의 수와 제곱근에 리스트로 만든다음 슬라이싱을 통해 리스트를 뒤집어서 판별하면 되는 문제였다!

n = int(input())
for i0 in range(1,n+1):
    a,b = map(int,input().split())
    result = 0
    for i in range(a,b+1):
        l = i**(1/2)
        if l == int(l):
            r = list(str(i))
            r1 = list(str(int(l)))
            if r == r[::-1] and r1 == r1[::-1]:
                result +=1
    print(f'#{i0} {result}')
 
